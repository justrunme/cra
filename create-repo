#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

CONFIG_FILE="$HOME/.create-repo.conf"
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"

mkdir -p ~/.create-repo/templates

# –§–ª–∞–≥–∏
show_help=false
show_version=false
show_status=false
show_log=false
run_update=false
run_clean=false
dry_run=false
show_list=false
remove_current=false
interactive=false
docker_init=false
sync_status=false
force_git_init=false
log_lines=20

while [[ $# -gt 0 ]]; do
  case $1 in
    --status) show_status=true ;;
    --log) show_log=true; log_lines="${2:-20}"; shift ;;
    --update|--self-update) run_update=true ;;
    --clean) run_clean=true ;;
    --dry-run) dry_run=true ;;
    --list) show_list=true ;;
    --remove) remove_current=true ;;
    --docker) docker_init=true ;;
    --sync-status) sync_status=true ;;
    --init) force_git_init=true ;;
    -h|--help) show_help=true ;;
    --version) show_version=true ;;
    *) repo=$1 ;;
  esac
  shift
done

REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
SCRIPT_PATH="/usr/local/bin/update-all"
repo=${repo:-$(basename "$PWD")}
default_visibility=${default_visibility:-public}
default_cron_interval=${default_cron_interval:-1}

# –í–µ—Ä—Å–∏—è
if $show_version; then
  VERSION=$(dpkg -s create-repo-auto 2>/dev/null | grep '^Version:' | awk '{print $2}')
  echo -e "create-repo version ${VERSION:-unknown}"
  exit 0
fi

# Help
if $show_help; then
  echo -e "${BLUE}üì¶ create-repo ‚Äî CLI –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Git-–ø—Ä–æ–µ–∫—Ç–æ–≤${RESET}"
  echo ""
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create-repo [–∏–º—è] [–æ–ø—Ü–∏–∏]"
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --status         –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å cron –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
  echo "  --log [N]        –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞"
  echo "  --list           –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—É—Ç–µ–π"
  echo "  --remove         –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–∂–µ–Ω–∏—è"
  echo "  --update         –û–±–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"
  echo "  --dry-run        –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
  echo "  --init           –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å git init –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
  echo "  --docker         –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Docker-–ø—Ä–æ–µ–∫—Ç —Å —à–∞–±–ª–æ–Ω–æ–º Dockerfile"
  echo "  --sync-status    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
  echo "  --version        –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é"
  echo "  --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
  exit 0
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
if command -v gh &>/dev/null; then
  platform="github"
elif [ -n "$GITLAB_TOKEN" ]; then
  platform="gitlab"
elif [[ -n "$BITBUCKET_USERNAME" && -n "$BITBUCKET_APP_PASSWORD" ]]; then
  platform="bitbucket"
else
  echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π${RESET}"
  echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑:${RESET}"
  echo "  üîπ GitHub: sudo apt install gh && gh auth login"
  echo "  üîπ GitLab: export GITLAB_TOKEN=..."
  echo "  üîπ Bitbucket: export BITBUCKET_USERNAME=... && BITBUCKET_APP_PASSWORD=..."
  exit 1
fi

# --sync-status
if $sync_status; then
  echo -e "${BLUE}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:${RESET}"
  while IFS= read -r path; do
    [ -d "$path/.git" ] || continue
    cd "$path"
    git fetch origin main &>/dev/null
    local_hash=$(git rev-parse HEAD)
    remote_hash=$(git rev-parse origin/main)
    if [[ "$local_hash" == "$remote_hash" ]]; then
      echo -e "${GREEN}‚úîÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω:${RESET} $path"
    else
      echo -e "${YELLOW}‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è sync:${RESET} $path"
    fi
  done < "$REPO_LIST"
  exit 0
fi

# --docker
if $docker_init; then
  echo -e "${BLUE}üê≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –ø—Ä–æ–µ–∫—Ç–∞...${RESET}"
  [ ! -f Dockerfile ] && echo -e "FROM alpine\nCMD [\"echo\", \"Hello from Docker!\"]" > Dockerfile
  [ ! -f docker-compose.yml ] && echo -e "version: '3'\nservices:\n  app:\n    build: ." > docker-compose.yml
  echo -e "${GREEN}‚úÖ –®–∞–±–ª–æ–Ω—ã Docker —Å–æ–∑–¥–∞–Ω—ã${RESET}"
fi

# --update
if $run_update; then
  echo -e "${BLUE}‚¨áÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏...${RESET}"
  LATEST=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest | grep browser_download_url | grep .deb | cut -d '"' -f 4)
  curl -LO "$LATEST"
  sudo dpkg -i create-repo-auto_*.deb
  echo -e "${GREEN}‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞${RESET}"
  exit 0
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git
if [ ! -d .git ] || $force_git_init; then
  git init
  git checkout -b main
fi

[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore

git add .
NOW=$(date "+%Y-%m-%d %H:%M:%S")
git commit -m "Initial commit at $NOW" &>/dev/null || true

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  if ! gh repo view "$repo" > /dev/null 2>&1; then
    gh repo create "$repo" --$default_visibility --source=. --push
  fi
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $( [[ "$default_visibility" == "private" ]] && echo true || echo false ) }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

git remote get-url origin &>/dev/null || git remote add origin "$remote_url"
git push -u origin main --quiet || true

grep -qxF "$PWD" "$REPO_LIST" 2>/dev/null || echo "$PWD" >> "$REPO_LIST"

# Cron
TMP_CRON=$(mktemp)
crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" > "$TMP_CRON"
echo "*/$default_cron_interval * * * * $SCRIPT_PATH # auto-sync by create-repo" >> "$TMP_CRON"
sort -u "$TMP_CRON" -o "$TMP_CRON"
crontab "$TMP_CRON"
rm "$TMP_CRON"

# –§–∏–Ω–∞–ª
echo -e "\n${GREEN}üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo' —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å $platform${RESET}"
echo "üìÅ –ü—É—Ç—å: $PWD"
echo "üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: $REPO_LIST"
echo "‚è±Ô∏è Cron: –∫–∞–∂–¥—ã–µ $default_cron_interval –º–∏–Ω"
echo "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å: nano ~/.create-repo.conf (default_cron_interval)"
