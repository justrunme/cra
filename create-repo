#!/bin/bash
set -e

# üé® –¶–≤–µ—Ç–∞
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

CONFIG_FILE="$HOME/.create-repo.conf"
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
mkdir -p ~/.create-repo/templates

# üö© –§–ª–∞–≥–∏
show_help=false
show_version=false
show_status=false
show_log=false
show_list=false
run_update=false
run_clean=false
remove_current=false
dry_run=false
share_repo=false
show_contributors=false
interactive=false
log_lines=20
team_name=""

# üéØ –ê—Ä–≥—É–º–µ–Ω—Ç—ã
while [[ $# -gt 0 ]]; do
  case $1 in
    --status) show_status=true ; shift ;;
    --log) show_log=true; log_lines="${2:-20}"; shift 2 ;;
    --list) show_list=true ; shift ;;
    --update|--self-update) run_update=true ; shift ;;
    --clean) run_clean=true ; shift ;;
    --remove) remove_current=true ; shift ;;
    --dry-run) dry_run=true ; shift ;;
    --share) share_repo=true ; shift ;;
    --contributors) show_contributors=true ; shift ;;
    --team) team_name=$2 ; shift 2 ;;
    --interactive) interactive=true ; shift ;;
    --version) show_version=true ; shift ;;
    --help|-h) show_help=true ; shift ;;
    *) repo=$1 ; shift ;;
  esac
done

# üìÅ –ü—É—Ç–∏
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
SCRIPT_PATH="/usr/local/bin/update-all"
repo=${repo:-$(basename "$PWD")}
default_visibility=${default_visibility:-public}
default_cron_interval=${default_cron_interval:-1}
default_team=${default_team:-$team_name}

# üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
notify() {
  msg="$1"
  if command -v notify-send &>/dev/null; then
    notify-send "create-repo" "$msg"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    osascript -e "display notification \"$msg\" with title \"create-repo\""
  elif grep -qEi "(Microsoft|WSL)" /proc/version &>/dev/null; then
    powershell.exe -Command "[System.Windows.Forms.MessageBox]::Show('$msg','create-repo')" 2>/dev/null || true
  fi
}

# üß© –í–µ—Ä—Å–∏—è
if $show_version; then
  VERSION=$(dpkg -s create-repo-auto 2>/dev/null | grep '^Version:' | awk '{print $2}')
  echo -e "create-repo version ${VERSION:-unknown}"
  exit 0
fi

# üÜò –°–ø—Ä–∞–≤–∫–∞
if $show_help; then
  echo -e "${BLUE}üì¶ create-repo ‚Äî CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è Git-–ø—Ä–æ–µ–∫—Ç–æ–≤${RESET}"
  echo ""
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create-repo [–∏–º—è] [–æ–ø—Ü–∏–∏]"
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --status         –°—Ç–∞—Ç—É—Å cron –∏ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏"
  echo "  --log [N]        –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞"
  echo "  --clean          –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É—Ç–µ–π"
  echo "  --list           –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"
  echo "  --remove         –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞"
  echo "  --update         –û–±–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É"
  echo "  --dry-run        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ push –∏ cron"
  echo "  --share          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
  echo "  --contributors   –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
  echo "  --team [name]    –£–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É GitHub"
  echo "  --version        –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é"
  echo "  --help           –°–ø—Ä–∞–≤–∫–∞"
  exit 0
fi

# üí¨ contributors
if $show_contributors; then
  echo -e "${BLUE}üë• Contributors:${RESET}"
  git shortlog -sne | sort -r
  exit 0
fi

# üîó share
if $share_repo; then
  if command -v gh &>/dev/null && gh repo view &>/dev/null; then
    user=$(gh api user --jq .login)
    echo -e "${GREEN}üîó https://github.com/$user/$repo${RESET}"
    echo -e "${YELLOW}üì¨ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É: gh api -X PUT /orgs/ORG/teams/TEAM/memberships/USERNAME${RESET}"
  fi
  exit 0
fi

# üßπ remove
if $remove_current; then
  sed -i "" "\|$PWD|d" "$REPO_LIST" 2>/dev/null || sed -i "\|$PWD|d" "$REPO_LIST"
  echo -e "${GREEN}üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–µ–∂–µ–Ω–∏—è: $PWD${RESET}"
  exit 0
fi

# üìÑ list
if $show_list; then
  echo -e "${BLUE}üìÉ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:${RESET}"
  n=1
  while IFS= read -r path; do
    last=$(grep "$path" "$LOG_FILE" 2>/dev/null | tail -n1 | cut -d "|" -f1)
    printf "%2d. %-50s %s\n" "$n" "$path" "${last:-‚Äî}"
    ((n++))
  done < "$REPO_LIST"
  exit 0
fi

# üì¶ platform
if command -v gh &>/dev/null; then
  platform="github"
elif [ -n "$GITLAB_TOKEN" ]; then
  platform="gitlab"
elif [[ -n "$BITBUCKET_USERNAME" && -n "$BITBUCKET_APP_PASSWORD" ]]; then
  platform="bitbucket"
else
  echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π${RESET}"
  echo -e "${YELLOW}üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑:${RESET}"
  echo "  ‚ñ∏ GitHub: sudo apt install gh && gh auth login"
  echo "  ‚ñ∏ GitLab: export GITLAB_TOKEN=..."
  echo "  ‚ñ∏ Bitbucket: export BITBUCKET_USERNAME=... && export BITBUCKET_APP_PASSWORD=..."
  exit 1
fi

echo -e "${GREEN}‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $platform${RESET}"

# üß™ dry-run
if $dry_run; then
  echo -e "${YELLOW}üß™ Dry-run: push –∏ cron –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è${RESET}"
  echo "üìÅ –ü–∞–ø–∫–∞: $PWD"
  echo "üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo"
  echo "üîí –í–∏–¥–∏–º–æ—Å—Ç—å: $default_visibility"
  echo "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: $default_cron_interval –º–∏–Ω"
  exit 0
fi

# üîß git init
[ ! -d .git ] && git init && git checkout -b main || git checkout main 2>/dev/null || git checkout -b main
[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore
git add .
NOW=$(date "+%Y-%m-%d %H:%M:%S")
committed=false
git commit -m "Initial commit at $NOW" &>/dev/null && committed=true || true

# üõ∞Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  if ! gh repo view "$repo" &>/dev/null; then
    args="--$default_visibility --source=."
    [[ -n "$default_team" ]] && args="$args --team $default_team"
    gh repo create "$repo" $args --push
  fi
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $( [[ "$default_visibility" == "private" ]] && echo true || echo false ) }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

git remote get-url origin &>/dev/null || git remote add origin "$remote_url"
git push -u origin main &>/dev/null && pushed=true || pushed=false

# ‚úÖ –°—Ç–∞—Ç—É—Å
echo "üîÄ –í–µ—Ç–∫–∞: main $([[ "$committed" == true ]] && echo '(–∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω)' || echo '(–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)')"
echo "üì§ $([[ "$pushed" == true ]] && echo '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω' || echo '–£–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω')"

# üìù –í —Å–ø–∏—Å–æ–∫
grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"

# üïí Cron / Launchctl
if [[ "$OSTYPE" == "darwin"* ]]; then
  # macOS
  plist="$HOME/Library/LaunchAgents/com.create-repo.auto.plist"
  cat > "$plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.create-repo.auto</string>
  <key>ProgramArguments</key>
  <array>
    <string>$SCRIPT_PATH</string>
  </array>
  <key>StartInterval</key>
  <integer>$((default_cron_interval * 60))</integer>
  <key>RunAtLoad</key>
  <true/>
</dict>
</plist>
EOF
  launchctl unload "$plist" &>/dev/null || true
  launchctl load "$plist"
else
  TMP_CRON=$(mktemp)
  crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" > "$TMP_CRON"
  echo "*/$default_cron_interval * * * * $SCRIPT_PATH # auto-sync by create-repo" >> "$TMP_CRON"
  sort -u "$TMP_CRON" -o "$TMP_CRON"
  crontab "$TMP_CRON"
  rm "$TMP_CRON"
fi

# ‚úÖ –§–∏–Ω–∞–ª
echo ""
echo -e "${GREEN}üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo' —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å $platform${RESET}"
echo "üìÅ –ü—É—Ç—å: $PWD"
echo "üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: $REPO_LIST"
echo "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: $default_cron_interval –º–∏–Ω"
echo "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å: nano ~/.create-repo.conf"

notify "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è '$repo' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
