#!/bin/bash
set -e

# 🎨 Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# 📦 Current version
SCRIPT_VERSION="v1.3.16"

# ✅ Known flags
VALID_FLAGS=(--help --interactive --platform= --platform-status --update --version --status --log --list --remove --clean --share --team --contributors --pull-only --dry-run --sync-now)

# 🧠 Suggest similar flag for mistyped ones
suggest_flag() {
  input="$1"
  best=""
  min_distance=999
  for f in "${VALID_FLAGS[@]}"; do
    dist=$(awk -v a="$input" -v b="$f" '
    function min(x,y){ return x<y ? x : y }
    BEGIN {
      la=length(a); lb=length(b); d=0
      for(i=1;i<=min(la,lb);i++) if(substr(a,i,1)!=substr(b,i,1)) d++
      d+=la>lb ? la-lb : lb-la
      print d
    }')
    if (( dist < min_distance )); then
      min_distance=$dist
      best=$f
    fi
  done
  if (( min_distance <= 3 )); then
    echo -e "${YELLOW}ℹ️  Did you mean: ${best}?${RESET}"
  fi
}

# ❌ Unknown flag protection (before Git runs)
for arg in "$@"; do
  if [[ "$arg" == --* ]] && ! printf "%s\n" "${VALID_FLAGS[@]}" | grep -qE "^${arg%%=*}$"; then
    echo -e "${RED}❌ Unknown flag: $arg${RESET}"
    suggest_flag "$arg"
    echo -e "${YELLOW}➡️  Tip: run 'create-repo --help' to see available options${RESET}"
    exit 1
  fi
done

# 📁 Paths
CONFIG_FILE="$HOME/.create-repo.conf"
PLATFORM_MAP="$HOME/.create-repo.platforms"
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
LOCAL_CONFIG_FILE=".create-repo.local.conf"
NOW=$(date "+%Y-%m-%d %H:%M:%S")

# 🏷 Flags
repo=""
platform_flag=""
show_help=false
show_platform_status=false
run_update=false
interactive=false
show_version=false

# ⛳ Parse args
while [[ $# -gt 0 ]]; do
  case $1 in
    --help|-h) show_help=true ; shift ;;
    --interactive) interactive=true ; shift ;;
    --platform=*) platform_flag="${1#*=}" ; shift ;;
    --platform-status) show_platform_status=true ; shift ;;
    --update) run_update=true ; shift ;;
    --version) show_version=true ; shift ;;
    *) repo=$1 ; shift ;;
  esac
done

# 📦 Version output
if $show_version; then
  echo -e "${GREEN}create-repo version: ${SCRIPT_VERSION}${RESET}"
  exit 0
fi

# 🔄 Self-update
if $run_update; then
  echo -e "${BLUE}⬆️ Checking for update...${RESET}"
  latest_version=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest | jq -r .tag_name)

  if [[ "$latest_version" != "$SCRIPT_VERSION" ]]; then
    echo -e "${YELLOW}🆕 New version available: $latest_version (current: $SCRIPT_VERSION)${RESET}"
    tmpdir=$(mktemp -d)
    curl -fsSL https://raw.githubusercontent.com/justrunme/cra/main/create-repo -o "$tmpdir/create-repo"
    curl -fsSL https://raw.githubusercontent.com/justrunme/cra/main/update-all -o "$tmpdir/update-all"
    sudo cp "$tmpdir/create-repo" /usr/local/bin/create-repo
    sudo cp "$tmpdir/update-all" /usr/local/bin/update-all
    sudo chmod +x /usr/local/bin/create-repo /usr/local/bin/update-all
    echo -e "${GREEN}✅ Updated to $latest_version${RESET}"
  else
    echo -e "${GREEN}✅ Already up to date: $SCRIPT_VERSION${RESET}"
  fi
  exit 0
fi

# 📘 Help
if $show_help; then
  echo -e "${BLUE}📦 create-repo — DevOps automation CLI${RESET}"
  echo "Usage: create-repo [repo-name] [--platform=github|gitlab|bitbucket] [--interactive]"
  echo "Flags: --update, --version, --help, --platform-status, --platform=PLATFORM"
  exit 0
fi

# 🌐 Platform map
if $show_platform_status; then
  echo -e "${BLUE}📦 Folder-to-platform bindings:${RESET}"
  [ -f "$PLATFORM_MAP" ] && cat "$PLATFORM_MAP" || echo "No bindings found."
  exit 0
fi

# 📁 Current folder
CURRENT_FOLDER=$(realpath "$PWD")

# ⚙️ Load config
if [[ -f "$LOCAL_CONFIG_FILE" ]]; then
  source "$LOCAL_CONFIG_FILE"
elif [[ -f "$CONFIG_FILE" ]]; then
  source "$CONFIG_FILE"
fi

# 🧙 First-time setup
if $interactive || [ ! -f "$CONFIG_FILE" ]; then
  echo -e "${BLUE}✨ Interactive setup...${RESET}"
  echo -ne "${YELLOW}📦 Repo name [$(basename "$PWD")]: ${RESET}"
  read input_repo
  repo=${input_repo:-$(basename "$PWD")}

  echo -ne "${YELLOW}🔐 Visibility (public/private) [public]: ${RESET}"
  read input_visibility
  default_visibility=${input_visibility:-public}

  echo -ne "${YELLOW}👥 GitHub team (optional): ${RESET}"
  read input_team
  default_team=$input_team

  echo -ne "${YELLOW}⏱ Sync interval in minutes [1]: ${RESET}"
  read input_interval
  default_cron_interval=${input_interval:-1}

  echo -ne "${YELLOW}🌿 Default branch [main]: ${RESET}"
  read input_branch
  default_branch=${input_branch:-main}

  echo -ne "${YELLOW}💾 Save config [global/local]: ${RESET}"
  read input_scope

  if [[ "$input_scope" == "local" ]]; then
    cat > "$LOCAL_CONFIG_FILE" <<EOF
default_visibility=$default_visibility
default_cron_interval=$default_cron_interval
default_team=$default_team
default_branch=$default_branch
EOF
    echo -e "${GREEN}✅ Saved local config${RESET}"
  else
    cat > "$CONFIG_FILE" <<EOF
default_visibility=$default_visibility
default_cron_interval=$default_cron_interval
default_team=$default_team
default_branch=$default_branch
EOF
    echo -e "${GREEN}✅ Saved global config${RESET}"
  fi
fi

# 🌍 Detect platform
if [[ -n "$platform_flag" ]]; then
  platform="$platform_flag"
  echo "$CURRENT_FOLDER=$platform" >> "$PLATFORM_MAP"
elif [[ -f "$PLATFORM_MAP" ]]; then
  platform=$(grep "^$CURRENT_FOLDER=" "$PLATFORM_MAP" | cut -d= -f2)
fi

if [[ -z "$platform" ]]; then
  available=()
  [[ -x "$(command -v gh)" ]] && gh auth status &>/dev/null && available+=("github")
  [[ -n "$GITLAB_TOKEN" ]] && available+=("gitlab")
  [[ -n "$BITBUCKET_USERNAME" && -n "$BITBUCKET_APP_PASSWORD" ]] && available+=("bitbucket")

  if [[ ${#available[@]} -eq 1 ]]; then
    platform="${available[0]}"
  elif [[ ${#available[@]} -gt 1 ]]; then
    echo -ne "${YELLOW}❓ Choose platform [github/gitlab/bitbucket]: ${RESET}"
    read chosen
    platform="$chosen"
    echo "$CURRENT_FOLDER=$platform" >> "$PLATFORM_MAP"
  fi
fi

if [[ -z "$platform" ]]; then
  echo -e "${RED}❌ No Git platform detected.${RESET}"
  exit 1
fi

# 🚀 Create repo
repo=${repo:-$(basename "$PWD")}
branch=${default_branch:-main}
echo -e "${GREEN}📦 Initializing '$repo' on $platform (branch: $branch)...${RESET}"

git init &>/dev/null
git checkout -b "$branch" &>/dev/null || git checkout "$branch"

[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore

git add .
git commit -m "Initial commit at $NOW" &>/dev/null || true

# 🌐 Remote
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  gh repo view "$repo" &>/dev/null || gh repo create "$repo" --$default_visibility --source=. --push
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $( [[ "$default_visibility" == "private" ]] && echo true || echo false ) }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

git remote add origin "$remote_url" 2>/dev/null || true
git push -u origin "$branch" &>/dev/null || true

grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"
echo "$NOW | $PWD | synced to $platform on branch $branch" >> "$LOG_FILE"

echo ""
echo -e "${GREEN}🎉 Repo '$repo' initialized and pushed to $platform!${RESET}"
echo "🌿 Branch: $branch"
echo "📁 Path: $PWD"
echo "📝 Tracked in: $REPO_LIST"
echo "🔁 Auto-sync enabled (via update-all)"
echo "ℹ️ Platform: $platform (configurable via --platform or .create-repo.local.conf)"
