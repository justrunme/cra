#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

CONFIG_FILE="$HOME/.create-repo.conf"
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"

mkdir -p ~/.create-repo/templates

# –§–ª–∞–≥–∏
show_help=false
show_version=false
show_status=false
show_log=false
run_update=false
run_clean=false
dry_run=false
show_list=false
remove_current=false
interactive=false
log_lines=20
show_contributors=false
share_repo=false
team_name=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --status) show_status=true ; shift ;;
    --log) show_log=true; log_lines="${2:-20}"; shift 2 ;;
    --update|--self-update) run_update=true ; shift ;;
    --clean) run_clean=true ; shift ;;
    --dry-run) dry_run=true ; shift ;;
    --list) show_list=true ; shift ;;
    --remove) remove_current=true ; shift ;;
    --contributors) show_contributors=true ; shift ;;
    --share) share_repo=true ; shift ;;
    --team) team_name=$2 ; shift 2 ;;
    -h|--help) show_help=true ; shift ;;
    --version) show_version=true ; shift ;;
    *) repo=$1; shift ;;
  esac
done

REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
SCRIPT_PATH="/usr/local/bin/update-all"
repo=${repo:-$(basename "$PWD")}
default_visibility=${default_visibility:-public}
default_cron_interval=${default_cron_interval:-1}
default_team=${default_team:-""}
[ -z "$team_name" ] && team_name="$default_team"

# --version
if $show_version; then
  VERSION=$(dpkg -s create-repo-auto 2>/dev/null | grep '^Version:' | awk '{print $2}')
  echo -e "create-repo version ${VERSION:-unknown}"
  exit 0
fi

# --help
if $show_help; then
  echo -e "${BLUE}üì¶ create-repo ‚Äî CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è Git-–ø—Ä–æ–µ–∫—Ç–æ–≤${RESET}"
  echo ""
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create-repo [–∏–º—è] [–æ–ø—Ü–∏–∏]"
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --status         –°—Ç–∞—Ç—É—Å cron –∏ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏"
  echo "  --log [N]        –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞"
  echo "  --clean          –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—É—Ç–µ–π"
  echo "  --list           –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—É—Ç–µ–π"
  echo "  --remove         –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
  echo "  --update         –û–±–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—É (.deb)"
  echo "  --version        –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é"
  echo "  --dry-run        –ë–µ–∑ –ø—É—à–∞ –∏ cron"
  echo "  --share          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
  echo "  --contributors   –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
  echo "  --team [name]    –£–∫–∞–∑–∞—Ç—å GitHub –∫–æ–º–∞–Ω–¥—É"
  exit 0
fi

# contributors
if $show_contributors; then
  echo -e "${BLUE}üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:${RESET}"
  git shortlog -sne | sort -r
  exit 0
fi

# share
if $share_repo; then
  if command -v gh &>/dev/null && gh repo view &>/dev/null; then
    user=$(gh api user --jq .login)
    echo -e "${GREEN}üîó https://github.com/$user/$repo${RESET}"
    echo -e "${YELLOW}üì¨ –ü—Ä–∏–≥–ª–∞—à–∞–π –∫–æ–ª–ª–µ–≥ –≤ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ GitHub CLI${RESET}"
  fi
  exit 0
fi

# --remove
if $remove_current; then
  sed -i "\|$PWD|d" "$REPO_LIST"
  echo -e "${GREEN}üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞: $PWD${RESET}"
  exit 0
fi

# --list
if $show_list; then
  echo -e "${BLUE}üìÉ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:${RESET}"
  n=1
  while IFS= read -r path; do
    last=$(grep "$path" "$LOG_FILE" 2>/dev/null | tail -n1 | cut -d "|" -f1)
    printf "%2d. %-50s %s\n" "$n" "$path" "${last:-‚Äî}"
    ((n++))
  done < "$REPO_LIST"
  exit 0
fi

# --status
if $show_status; then
  echo -e "${BLUE}üì¶ –°—Ç–∞—Ç—É—Å create-repo:${RESET}"
  echo "üìÅ –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: $PWD"
  grep -qxF "$PWD" "$REPO_LIST" && echo "‚úÖ –í —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è" || echo "‚ùå –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
  crontab -l | grep "$SCRIPT_PATH" || echo "‚ö†Ô∏è Cron-–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
  echo ""
  tail -n 1 "$LOG_FILE" 2>/dev/null || echo "–õ–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
  exit 0
fi

# --clean
if $run_clean; then
  TMP=$(mktemp)
  while IFS= read -r path; do
    [ -d "$path" ] && echo "$path"
  done < "$REPO_LIST" > "$TMP"
  mv "$TMP" "$REPO_LIST"
  echo -e "${GREEN}üßπ –û—á–∏—â–µ–Ω–æ${RESET}"
  exit 0
fi

# --log
if $show_log; then
  echo -e "${BLUE}üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ $log_lines —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞:${RESET}"
  tail -n "$log_lines" "$LOG_FILE" 2>/dev/null || echo "–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω."
  exit 0
fi

# --update
if $run_update; then
  echo -e "${BLUE}‚¨áÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...${RESET}"
  LATEST=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest | grep browser_download_url | grep .deb | cut -d '"' -f 4)
  curl -LO "$LATEST"
  sudo dpkg -i create-repo-auto_*.deb
  echo -e "${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ${RESET}"
  exit 0
fi

# --dry-run
if $dry_run; then
  echo -e "${YELLOW}üß™ Dry-run:${RESET}"
  echo "üìÅ –ü—É—Ç—å: $PWD"
  echo "üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo"
  echo "üîí –í–∏–¥–∏–º–æ—Å—Ç—å: $default_visibility"
  echo "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª cron: $default_cron_interval –º–∏–Ω"
  exit 0
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
if command -v gh &>/dev/null; then
  platform="github"
elif [ -n "$GITLAB_TOKEN" ]; then
  platform="gitlab"
elif [[ -n "$BITBUCKET_USERNAME" && -n "$BITBUCKET_APP_PASSWORD" ]]; then
  platform="bitbucket"
else
  echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π!${RESET}"
  echo "–£—Å—Ç–∞–Ω–æ–≤–∏ gh –∏–ª–∏ –∑–∞–¥–∞–π GITLAB_TOKEN / BITBUCKET_*"
  exit 1
fi

echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π: $platform${RESET}"

# Git init
[ ! -d .git ] && git init && git checkout -b main || git checkout main 2>/dev/null || git checkout -b main
[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore

git add .
NOW=$(date "+%Y-%m-%d %H:%M:%S")
committed=false
git commit -m "Initial commit at $NOW" &>/dev/null && committed=true

# –°–æ–∑–¥–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  if ! gh repo view "$repo" &>/dev/null; then
    team_arg=""
    [ -n "$team_name" ] && team_arg="--team $team_name"
    gh repo create "$repo" $team_arg --$default_visibility --source=. --push
  fi
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $( [[ "$default_visibility" == "private" ]] && echo true || echo false ) }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

git remote get-url origin &>/dev/null || git remote add origin "$remote_url"
git push -u origin main --quiet || true

# –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
echo "üîÄ –í–µ—Ç–∫–∞: main $([[ "$committed" == true ]] && echo '(—Å–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç)' || echo '(–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)')"
echo "üì§ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω"

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"

# Cron
TMP_CRON=$(mktemp)
crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" > "$TMP_CRON"
echo "*/$default_cron_interval * * * * $SCRIPT_PATH # auto-sync by create-repo" >> "$TMP_CRON"
sort -u "$TMP_CRON" -o "$TMP_CRON"
crontab "$TMP_CRON"
rm "$TMP_CRON"

# –§–∏–Ω–∞–ª
echo ""
echo -e "${GREEN}üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo' —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å $platform${RESET}"
echo "üìÅ –ü—É—Ç—å: $PWD"
echo "üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: $REPO_LIST"
echo "‚è±Ô∏è Cron: –∫–∞–∂–¥—ã–µ $default_cron_interval –º–∏–Ω"
echo "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª: nano ~/.create-repo.conf"
