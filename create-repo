#!/bin/bash
set -e

# 🎨 Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# 📁 Paths
CONFIG_FILE="$HOME/.create-repo.conf"
PLATFORM_FILE="$HOME/.create-repo.platforms"
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
SCRIPT_PATH="/usr/local/bin/update-all"
NOW=$(date "+%Y-%m-%d %H:%M:%S")

# 🌟 First run check
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
interactive=false
[ ! -f "$CONFIG_FILE" ] && interactive=true

# 🚩 Flags
show_help=false
run_update=false
show_platforms=false
specified_platform=""
repo=""

# 🔍 Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --help|-h) show_help=true ; shift ;;
    --update|--self-update) run_update=true ; shift ;;
    --platform-status) show_platforms=true ; shift ;;
    --platform=*) specified_platform="${1#--platform=}" ; shift ;;
    *) repo=$1 ; shift ;;
  esac
done

# 📘 Help
if $show_help; then
  echo -e "${BLUE}📦 create-repo — DevOps-friendly Git CLI tool${RESET}"
  echo "Usage: create-repo [repo-name] [options]"
  echo ""
  echo "Options:"
  echo "  --help               Show this help message"
  echo "  --update             Self-update the tool"
  echo "  --platform=PLATFORM  Override detected platform (github/gitlab/bitbucket)"
  echo "  --platform-status    Show platform mapping for folders"
  exit 0
fi

# 🔎 Show platform mappings
if $show_platforms; then
  echo -e "${BLUE}📍 Platform mappings (from ~/.create-repo.platforms):${RESET}"
  [ ! -f "$PLATFORM_FILE" ] && echo "No mappings yet." && exit 0
  column -t -s "=" "$PLATFORM_FILE"
  exit 0
fi

# ⬆️ Self-update (placeholder)
if $run_update; then
  echo -e "${BLUE}⬆️ Self-update logic coming soon${RESET}"
  exit 0
fi

# 🔁 Load saved platform if exists
if [ -z "$specified_platform" ] && [ -f "$PLATFORM_FILE" ]; then
  saved_platform=$(grep "^$PWD=" "$PLATFORM_FILE" | cut -d= -f2)
  if [ -n "$saved_platform" ]; then
    echo -e "${BLUE}📌 Using saved platform: $saved_platform (from ~/.create-repo.platforms)${RESET}"
    platform="$saved_platform"
  fi
fi

# 🧭 Detect available platforms
available=()
[ -x "$(command -v gh)" ] && available+=("github")
[ -n "$GITLAB_TOKEN" ] && available+=("gitlab")
[ -n "$BITBUCKET_USERNAME" ] && [ -n "$BITBUCKET_APP_PASSWORD" ] && available+=("bitbucket")

# 🚨 No platform?
if [ -z "$platform" ] && [ -z "$specified_platform" ] && [ ${#available[@]} -eq 0 ]; then
  echo -e "${RED}❌ No Git platform detected!${RESET}"
  echo "Install GitHub CLI or export GITLAB_TOKEN / BITBUCKET credentials."
  exit 1
fi

# ❓ Ask if multiple platforms
if [ -z "$platform" ] && [ -z "$specified_platform" ] && [ ${#available[@]} -gt 1 ]; then
  echo -e "${YELLOW}📦 Multiple platforms detected. Please choose:${RESET}"
  for i in "${!available[@]}"; do
    echo "  $((i + 1))) ${available[$i]}"
  done
  echo -ne "${BLUE}❓ Enter number [1-${#available[@]}]: ${RESET}"
  read choice
  index=$((choice - 1))
  if [ -n "${available[$index]}" ]; then
    platform="${available[$index]}"
    echo "$PWD=$platform" >> "$PLATFORM_FILE"
    echo -e "${GREEN}✅ Saved '$platform' as platform for this folder.${RESET}"
    echo -e "${YELLOW}ℹ️ Use --platform=... to override this in future${RESET}"
  else
    echo -e "${RED}❌ Invalid choice. Exiting.${RESET}"
    exit 1
  fi
fi

# ✅ Use manually specified platform
[ -n "$specified_platform" ] && platform="$specified_platform" && echo "$PWD=$platform" >> "$PLATFORM_FILE"

# 📦 Interactive init
if $interactive; then
  echo ""
  echo -ne "${YELLOW}📦 Repository name [$(basename "$PWD")]: ${RESET}"
  read input_repo
  repo=${input_repo:-$(basename "$PWD")}

  echo -ne "${YELLOW}🔐 Visibility (public/private) [public]: ${RESET}"
  read vis_input
  default_visibility=${vis_input:-public}

  echo -ne "${YELLOW}👥 GitHub team (optional) [none]: ${RESET}"
  read team_input
  default_team=${team_input:-}

  echo -ne "${YELLOW}⏱ Auto-sync interval in minutes [1]: ${RESET}"
  read interval_input
  default_cron_interval=${interval_input:-1}

  cat > "$CONFIG_FILE" <<EOF
default_visibility=$default_visibility
default_cron_interval=$default_cron_interval
default_team=$default_team
EOF

  echo ""
  echo -e "${GREEN}✅ Saved settings to $CONFIG_FILE${RESET}"
fi

# 🚀 Git init
if [ ! -d .git ]; then
  git init
  git checkout -b main
else
  echo -e "${BLUE}📁 Git already initialized${RESET}"
fi

# 📝 Init README & .gitignore
[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore
git add .
git commit -m "Initial commit at $NOW" &>/dev/null || true

# 🌐 Create remote
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  gh repo view "$repo" &>/dev/null || {
    args="--$default_visibility --source=."
    [ -n "$default_team" ] && args="$args --team $default_team"
    gh repo create "$repo" $args --push || {
      echo -e "${RED}❌ GitHub repo creation failed${RESET}"
      exit 1
    }
  }
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $( [[ "$default_visibility" == "private" ]] && echo true || echo false ) }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

# 🛰 Push
git remote get-url origin &>/dev/null || git remote add origin "$remote_url"
git push -u origin "$(git symbolic-ref --short HEAD)" &>/dev/null || true

# 📝 Track
grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"
echo "$NOW | $PWD | synced to $platform as $repo" >> "$LOG_FILE"

# 🕒 Cron / launchd
if [[ "$OSTYPE" == "darwin"* ]]; then
  plist="$HOME/Library/LaunchAgents/com.create-repo.auto.plist"
  cat > "$plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist>
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.create-repo.auto</string>
  <key>ProgramArguments</key>
  <array><string>$SCRIPT_PATH</string></array>
  <key>StartInterval</key>
  <integer>$((default_cron_interval * 60))</integer>
  <key>RunAtLoad</key>
  <true/>
</dict>
</plist>
EOF
  launchctl unload "$plist" &>/dev/null || true
  launchctl load "$plist"
else
  (crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" ; echo "*/$default_cron_interval * * * * $SCRIPT_PATH") | sort -u | crontab -
fi

# ✅ Done
echo -e "\n${GREEN}🎉 Repo '$repo' synced with $platform${RESET}"
echo "📁 Path: $PWD"
echo "⏱ Sync every $default_cron_interval min"
echo "📘 Config: $CONFIG_FILE"
echo "📍 Platform mapping: $PLATFORM_FILE"

# 🔔 Notify
command -v notify-send &>/dev/null && notify-send "create-repo" "Repo '$repo' synced to $platform!"
