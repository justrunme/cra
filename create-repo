#!/bin/bash
set -e

# 🎨 Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# 📁 Paths
CONFIG_FILE="$HOME/.create-repo.conf"
PLATFORM_MAP="$HOME/.create-repo.platforms"
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
LOCAL_CONFIG_FILE=".create-repo.local.conf"
NOW=$(date "+%Y-%m-%d %H:%M:%S")

# 🌍 Flags and args
repo=""
platform_flag=""
show_help=false
show_platform_status=false
interactive=false
run_update=false
other_flag=""

# ⛳ Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --help|-h) show_help=true ;;
    --interactive) interactive=true ;;
    --platform=*) platform_flag="${1#*=}" ;;
    --platform-status) show_platform_status=true ;;
    --update) run_update=true ;;
    --status|--log*|--list|--remove|--clean|--share|--team*|--contributors|--pull-only|--dry-run|--version)
      other_flag="$1" ;;
    *)
      if [[ "$1" != --* && -z "$repo" ]]; then
        repo="$1"
      fi
      ;;
  esac
  shift
done

# 📘 Help
if $show_help; then
  echo -e "${BLUE}📦 create-repo — DevOps automation CLI${RESET}"
  echo "Usage: create-repo [repo-name] [--flags]"
  echo "Flags: --update --interactive --platform= --platform-status --log N --status ..."
  exit 0
fi

# ⬆️ Self-update
if $run_update; then
  echo -e "${BLUE}⬆️ Updating create-repo...${RESET}"
  curl -fsSL https://raw.githubusercontent.com/justrunme/cra/main/install-create-repo.sh | sudo bash
  echo -e "${GREEN}✅ All components updated successfully!${RESET}"
  exit 0
fi

# 🧭 Show platform bindings
if $show_platform_status; then
  echo -e "${BLUE}📦 Folder ↔ Platform bindings:${RESET}"
  [ -f "$PLATFORM_MAP" ] && cat "$PLATFORM_MAP" || echo "No bindings found."
  exit 0
fi

# 📍 Current folder
CURRENT_FOLDER=$(realpath "$PWD")

# ⚙️ Load config
if [[ -f "$LOCAL_CONFIG_FILE" ]]; then
  source "$LOCAL_CONFIG_FILE"
elif [[ -f "$CONFIG_FILE" ]]; then
  source "$CONFIG_FILE"
fi

# 🧙‍♂️ Interactive setup
if $interactive || [ ! -f "$CONFIG_FILE" ]; then
  echo -e "${BLUE}✨ Interactive setup...${RESET}"
  echo -ne "${YELLOW}📦 Repository name [$(basename "$PWD")]: ${RESET}"
  read input_repo
  repo=${input_repo:-$(basename "$PWD")}

  echo -ne "${YELLOW}🔐 Visibility (public/private) [public]: ${RESET}"
  read input_visibility
  default_visibility=${input_visibility:-public}

  echo -ne "${YELLOW}👥 GitHub team (optional): ${RESET}"
  read input_team
  default_team=$input_team

  echo -ne "${YELLOW}⏱ Sync interval in minutes [1]: ${RESET}"
  read input_interval
  default_cron_interval=${input_interval:-1}

  echo -ne "${YELLOW}🌿 Default branch (main/master) [main]: ${RESET}"
  read input_branch
  default_branch=${input_branch:-main}

  echo -ne "${YELLOW}💾 Save config globally or locally? [global/local]: ${RESET}"
  read input_scope

  if [[ "$input_scope" == "local" ]]; then
    cat > "$LOCAL_CONFIG_FILE" <<EOF
default_visibility=$default_visibility
default_cron_interval=$default_cron_interval
default_team=$default_team
default_branch=$default_branch
EOF
    echo -e "${GREEN}✅ Local config saved: $LOCAL_CONFIG_FILE${RESET}"
  else
    cat > "$CONFIG_FILE" <<EOF
default_visibility=$default_visibility
default_cron_interval=$default_cron_interval
default_team=$default_team
default_branch=$default_branch
EOF
    echo -e "${GREEN}✅ Global config saved: $CONFIG_FILE${RESET}"
  fi
fi

# 🌐 Platform detection
if [[ -n "$platform_flag" ]]; then
  platform="$platform_flag"
  echo "$CURRENT_FOLDER=$platform" >> "$PLATFORM_MAP"
elif [[ -f "$PLATFORM_MAP" ]]; then
  platform=$(grep "^$CURRENT_FOLDER=" "$PLATFORM_MAP" | cut -d= -f2)
fi

if [[ -z "$platform" ]]; then
  platforms=()
  [[ -x "$(command -v gh)" ]] && gh auth status &>/dev/null && platforms+=("github")
  [[ -n "$GITLAB_TOKEN" ]] && platforms+=("gitlab")
  [[ -n "$BITBUCKET_USERNAME" && -n "$BITBUCKET_APP_PASSWORD" ]] && platforms+=("bitbucket")

  if [[ ${#platforms[@]} -eq 1 ]]; then
    platform="${platforms[0]}"
  elif [[ ${#platforms[@]} -gt 1 ]]; then
    echo -e "${YELLOW}⚠️ Multiple platforms found: ${platforms[*]}${RESET}"
    echo -ne "${YELLOW}❓ Choose platform for this folder: [github/gitlab/bitbucket]: ${RESET}"
    read choice
    platform="$choice"
    echo "$CURRENT_FOLDER=$platform" >> "$PLATFORM_MAP"
    echo -e "${GREEN}📁 Folder bound to $platform${RESET}"
  fi
fi

if [[ -z "$platform" ]]; then
  echo -e "${RED}❌ No platform detected. Please configure GitHub, GitLab, or Bitbucket.${RESET}"
  exit 1
fi

# ⚙️ Final values
repo=${repo:-$(basename "$PWD")}
branch=${default_branch:-main}
echo -e "${GREEN}📦 Initializing '$repo' on $platform (branch: $branch)...${RESET}"

# 🌱 Git init
git init &>/dev/null
git checkout -b "$branch" &>/dev/null || git checkout "$branch"

# 📄 Initial files
[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore

git add .
git commit -m "Initial commit at $NOW" &>/dev/null || true

# 🌍 Create remote repo
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  gh repo view "$repo" &>/dev/null || gh repo create "$repo" --$default_visibility --source=. --push
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  is_private="false"
  [[ "$default_visibility" == "private" ]] && is_private="true"
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $is_private }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

# 🚀 Push
git remote add origin "$remote_url" 2>/dev/null || true
git push -u origin "$branch" &>/dev/null || true

# 📝 Track repo
grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"
echo "$NOW | $PWD | synced to $platform on branch $branch" >> "$LOG_FILE"

# ✅ Done
echo ""
echo -e "${GREEN}🎉 Repo '$repo' initialized and pushed to $platform!${RESET}"
echo "🌿 Branch: $branch"
echo "📁 Path: $PWD"
echo "📝 Tracked in: $REPO_LIST"
echo "🔄 Platform binding saved in: $PLATFORM_MAP"
