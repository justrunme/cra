#!/bin/bash
set -e

# üé® Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# üìÅ Paths
CONFIG_FILE="$HOME/.create-repo.conf"
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
SCRIPT_PATH="/usr/local/bin/update-all"
NOW=$(date "+%Y-%m-%d %H:%M:%S")

# üåü First run check
if [ ! -f "$CONFIG_FILE" ]; then
  echo -e "${BLUE}‚ú® –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ create-repo ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Å—ë –≤–º–µ—Å—Ç–µ!${RESET}"
  interactive=true
else
  source "$CONFIG_FILE"
  interactive=false
fi

# üö© Flags
show_help=false
run_update=false
repo=""

# üîç Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --help|-h) show_help=true ; shift ;;
    --update|--self-update) run_update=true ; shift ;;
    *) repo=$1 ; shift ;;
  esac
done

# üìò Help
if $show_help; then
  echo -e "${BLUE}üì¶ create-repo ‚Äî CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è Git-–ø—Ä–æ–µ–∫—Ç–æ–≤${RESET}"
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create-repo [–∏–º—è] [–æ–ø—Ü–∏–∏]"
  echo "–û–ø—Ü–∏–∏: --update --help"
  exit 0
fi

# ‚¨ÜÔ∏è Update logic
if $run_update; then
  echo -e "${BLUE}‚¨ÜÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...${RESET}"

  current_version=$(dpkg -s create-repo 2>/dev/null | grep '^Version:' | awk '{print $2}')
  latest_version=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest | grep '"tag_name":' | cut -d '"' -f 4 | sed 's/^v//')

  if [[ -z "$latest_version" ]]; then
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å GitHub${RESET}"
    echo "$NOW | ERROR fetching latest version" >> "$ERROR_LOG"
    exit 1
  fi

  echo -e "üî¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${YELLOW}${current_version:-–Ω–µ –Ω–∞–π–¥–µ–Ω–∞}${RESET}"
  echo -e "üåê –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: ${GREEN}$latest_version${RESET}"

  if [[ "$latest_version" == "$current_version" ]]; then
    echo -e "${BLUE}‚úÖ –£ –≤–∞—Å —É–∂–µ —Å–∞–º–∞—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è.${RESET}"
    exit 0
  fi

  echo -e "${BLUE}üìÇ –°–∫–∞—á–∏–≤–∞–µ–º .deb...${RESET}"
  latest_url=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest \
    | grep browser_download_url | grep .deb | cut -d '"' -f 4)

  if [[ -n "$latest_url" ]]; then
    tmp_deb=$(mktemp)
    curl -L "$latest_url" -o "$tmp_deb"
    if sudo dpkg -i "$tmp_deb"; then
      echo -e "${GREEN}‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ $latest_version!${RESET}"
    else
      echo "$NOW | ERROR installing update" >> "$ERROR_LOG"
      echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞–π–ª–∞${RESET}"
    fi
    rm -f "$tmp_deb"
  else
    echo "$NOW | ERROR fetching .deb link" >> "$ERROR_LOG"
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ .deb —Ñ–∞–π–ª${RESET}"
  fi
  exit 0
fi

# ü§ñ Interactive setup
if $interactive; then
  echo ""
  echo -ne "${YELLOW}üì¶ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è [$(basename "$PWD")]: ${RESET}"
  read input_repo
  repo=${input_repo:-$(basename "$PWD")}

  echo -ne "${YELLOW}üîê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (public/private) [public]: ${RESET}"
  read visibility_input
  default_visibility=${visibility_input:-public}

  echo -ne "${YELLOW}üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É GitHub (optional) [none]: ${RESET}"
  read input_team
  default_team=${input_team:-}

  echo -ne "${YELLOW}‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö) [1]: ${RESET}"
  read interval_input
  default_cron_interval=${interval_input:-1}

  # Save config with comments
  cat > "$CONFIG_FILE" <<EOF
# ~/.create-repo.conf ‚Äî –∫–æ–Ω—Ñ–∏–≥ —É—Ç–∏–ª–∏—Ç—ã create-repo
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ.

default_visibility=$default_visibility
default_cron_interval=$default_cron_interval
default_team=$default_team
EOF

  echo ""
  echo -e "${GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $CONFIG_FILE${RESET}"
  echo -e "üìå –ò—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: ${YELLOW}nano ~/.create-repo.conf${RESET}"
fi

# üß≠ Determine platform
if command -v gh &>/dev/null; then
  platform="github"
elif [ -n "$GITLAB_TOKEN" ]; then
  platform="gitlab"
elif [[ -n "$BITBUCKET_USERNAME" && -n "$BITBUCKET_APP_PASSWORD" ]]; then
  platform="bitbucket"
else
  echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π (GitHub, GitLab, Bitbucket)${RESET}"
  echo -e "${YELLOW}üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º:${RESET}"
  echo -e "  ‚ñ∏ GitHub: sudo apt install gh && gh auth login"
  echo -e "  ‚ñ∏ GitLab: export GITLAB_TOKEN=..."
  echo -e "  ‚ñ∏ Bitbucket: export BITBUCKET_USERNAME=... && export BITBUCKET_APP_PASSWORD=..."
  exit 1
fi

# üöÄ Git init and pull if applicable
if [ -d .git ] && git remote get-url origin &>/dev/null; then
  echo -ne "${YELLOW}üì• –ù–∞–π–¥–µ–Ω origin. –°–¥–µ–ª–∞—Ç—å git pull –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º? [Y/n]: ${RESET}"
  read pull_choice
  if [[ "$pull_choice" =~ ^[Yy]?$ ]]; then
    git pull origin "$(git symbolic-ref --short HEAD)"
  fi
else
  git init
  git checkout -b main
fi

# üìÑ Init content
[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore

git add .
commit_msg="Initial commit at $NOW"
git commit -m "$commit_msg" &>/dev/null || true

# üöÄ Create remote repository
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  if ! gh repo view "$repo" &>/dev/null; then
    args="--$default_visibility --source=."
    [[ -n "$default_team" ]] && args="$args --team $default_team"
    gh repo create "$repo" $args --push || {
      echo "$NOW | ERROR creating GitHub repo '$repo'" >> "$ERROR_LOG"
      echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è${RESET}"
      exit 1
    }
  fi
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $( [[ "$default_visibility" == "private" ]] && echo true || echo false ) }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

git remote get-url origin &>/dev/null || git remote add origin "$remote_url"
git push -u origin "$(git symbolic-ref --short HEAD)" &>/dev/null || true

# üìù Track
grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"
echo "$NOW | $PWD | synced to $platform as $repo" >> "$LOG_FILE"

# ‚è± Cron or launchd
if [[ "$OSTYPE" == "darwin"* ]]; then
  plist="$HOME/Library/LaunchAgents/com.create-repo.auto.plist"
  cat > "$plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.create-repo.auto</string>
  <key>ProgramArguments</key>
  <array>
    <string>$SCRIPT_PATH</string>
  </array>
  <key>StartInterval</key>
  <integer>$((default_cron_interval * 60))</integer>
  <key>RunAtLoad</key>
  <true/>
</dict>
</plist>
EOF
  launchctl unload "$plist" &>/dev/null || true
  launchctl load "$plist"
else
  TMP_CRON=$(mktemp)
  crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" > "$TMP_CRON"
  echo "*/$default_cron_interval * * * * $SCRIPT_PATH # auto-sync by create-repo" >> "$TMP_CRON"
  sort -u "$TMP_CRON" -o "$TMP_CRON"
  crontab "$TMP_CRON"
  rm "$TMP_CRON"
fi

# ‚úÖ Done
echo ""
echo -e "${GREEN}üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo' —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å $platform${RESET}"
echo "üìÅ –ü—É—Ç—å: $PWD"
echo "üìù –°–ª–µ–∂–µ–Ω–∏–µ: $REPO_LIST"
echo "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: $default_cron_interval –º–∏–Ω"
echo "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å: nano ~/.create-repo.conf"

# üîî Notify
if command -v notify-send &>/dev/null; then
  notify-send "create-repo" "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è '$repo' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
fi
