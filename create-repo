#!/bin/bash
set -e

# üé® –¶–≤–µ—Ç–∞
GREEN="\e[32m"; YELLOW="\e[33m"; RED="\e[31m"; BLUE="\e[34m"; RESET="\e[0m"

CONFIG_FILE="$HOME/.create-repo.conf"
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
mkdir -p ~/.create-repo/templates

# üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
SCRIPT_PATH="/usr/local/bin/update-all"
repo=${repo:-$(basename "$PWD")}
default_visibility=${default_visibility:-public}
default_cron_interval=${default_cron_interval:-1}
default_team=${default_team:-}

# üßæ –§–ª–∞–≥–∏
show_help=false; show_version=false; show_status=false; show_log=false
run_update=false; run_clean=false; dry_run=false; show_list=false
remove_current=false; interactive=false; share_repo=false
show_contributors=false; team_name=""; log_lines=20

# üéõÔ∏è –ê—Ä–≥—É–º–µ–Ω—Ç—ã
while [[ $# -gt 0 ]]; do
  case $1 in
    --status) show_status=true ;;
    --log) show_log=true; log_lines="${2:-20}"; shift ;;
    --update|--self-update) run_update=true ;;
    --clean) run_clean=true ;;
    --dry-run) dry_run=true ;;
    --list) show_list=true ;;
    --remove) remove_current=true ;;
    --interactive) interactive=true ;;
    --share) share_repo=true ;;
    --contributors) show_contributors=true ;;
    --team) team_name=$2; shift ;;
    --version) show_version=true ;;
    -h|--help) show_help=true ;;
    *) repo=$1 ;;
  esac
  shift
done

# üìå –í–µ—Ä—Å–∏—è
if $show_version; then
  VERSION=$(dpkg -s create-repo-auto 2>/dev/null | grep '^Version:' | awk '{print $2}')
  echo -e "create-repo version ${VERSION:-unknown}"
  exit 0
fi

# üìò Help
if $show_help; then
  echo -e "${BLUE}üì¶ create-repo ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Git-–ø—Ä–æ–µ–∫—Ç–æ–≤${RESET}"
  echo ""
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create-repo [–∏–º—è] [–æ–ø—Ü–∏–∏]"
  echo ""
  echo "–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏:"
  echo "  --status         –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å cron –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö"
  echo "  --log [N]        –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞"
  echo "  --clean          –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π"
  echo "  --list           –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"
  echo "  --remove         –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
  echo "  --update         –û–±–Ω–æ–≤–∏—Ç—å .deb –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"
  echo "  --dry-run        –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
  echo "  --contributors   –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ git"
  echo "  --share          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
  echo "  --team [team]    –ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ (GitHub)"
  echo "  --version        –í–µ—Ä—Å–∏—è —É—Ç–∏–ª–∏—Ç—ã"
  echo "  -h, --help       –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
  exit 0
fi

# üóëÔ∏è --remove
if $remove_current; then
  sed -i "\|$PWD|d" "$REPO_LIST"
  echo -e "${GREEN}üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–≤—Ç–æ—Å–ª–µ–∂–µ–Ω–∏—è: $PWD${RESET}"
  exit 0
fi

# üìú --list
if $show_list; then
  echo -e "${BLUE}üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:${RESET}"
  n=1
  while IFS= read -r path; do
    last=$(grep "$path" "$LOG_FILE" 2>/dev/null | tail -n1 | cut -d "|" -f1)
    printf "%2d. %-50s %s\n" $n "$path" "${last:-‚Äî}"; ((n++))
  done < "$REPO_LIST"
  exit 0
fi

# üìä --status
if $show_status; then
  echo -e "${BLUE}üîç –°—Ç–∞—Ç—É—Å create-repo${RESET}"
  echo "üìÅ –ü—É—Ç—å: $PWD"
  echo "üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: $(grep -c . "$REPO_LIST" 2>/dev/null)"
  grep -qxF "$PWD" "$REPO_LIST" && echo "‚úÖ –í —Å–ø–∏—Å–∫–µ" || echo "‚ùå –ù–µ –≤ —Å–ø–∏—Å–∫–µ"
  echo "‚è±Ô∏è Cron:"
  crontab -l 2>/dev/null | grep "$SCRIPT_PATH" || echo "üö´ –ù–µ –Ω–∞–π–¥–µ–Ω"
  tail -n1 "$LOG_FILE" 2>/dev/null || echo "–õ–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω"
  exit 0
fi

# üßΩ --clean
if $run_clean; then
  TMP=$(mktemp)
  while IFS= read -r line; do [ -d "$line" ] && echo "$line"; done < "$REPO_LIST" > "$TMP"
  mv "$TMP" "$REPO_LIST"
  echo -e "${GREEN}‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω${RESET}"
  exit 0
fi

# ‚¨áÔ∏è --update
if $run_update; then
  echo -e "${BLUE}‚¨áÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...${RESET}"
  LATEST=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest | grep .deb | cut -d '"' -f 4)
  curl -LO "$LATEST" && sudo dpkg -i create-repo-auto_*.deb
  echo -e "${GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ${RESET}"
  exit 0
fi

# üë§ --contributors
if $show_contributors; then
  echo -e "${BLUE}üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:${RESET}"
  git shortlog -sne | sort -r
  exit 0
fi

# üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
if command -v gh &>/dev/null; then
  platform="github"
elif [ -n "$GITLAB_TOKEN" ]; then
  platform="gitlab"
elif [ -n "$BITBUCKET_USERNAME" ] && [ -n "$BITBUCKET_APP_PASSWORD" ]; then
  platform="bitbucket"
else
  echo -e "${RED}‚ùå –ù–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π${RESET}"
  echo -e "${YELLOW}üîß –£—Å—Ç–∞–Ω–æ–≤–∏ –æ–¥–Ω—É –∏–∑:${RESET}"
  echo "  GitHub: sudo apt install gh && gh auth login"
  echo "  GitLab: export GITLAB_TOKEN=..."
  echo "  Bitbucket: export BITBUCKET_USERNAME=... && export BITBUCKET_APP_PASSWORD=..."
  exit 1
fi

# üìÅ Git init
[ ! -d .git ] && git init && git checkout -b main || git checkout main 2>/dev/null || git checkout -b main
[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore
git add .

NOW=$(date "+%Y-%m-%d %H:%M:%S")
git commit -m "Initial commit at $NOW" &>/dev/null || true

# üì° –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  team_arg=$([[ -n "$team_name" ]] && echo "--team $team_name" || [[ -n "$default_team" ]] && echo "--team $default_team")
  if ! gh repo view "$repo" > /dev/null 2>&1; then
    gh repo create "$repo" $team_arg --$default_visibility --source=. --push
  fi
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $( [[ "$default_visibility" == "private" ]] && echo true || echo false ) }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

git remote get-url origin &>/dev/null || git remote add origin "$remote_url"
git push -u origin main --quiet || true

# üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"

# ‚è±Ô∏è Cron
TMP=$(mktemp)
crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" > "$TMP"
echo "*/$default_cron_interval * * * * $SCRIPT_PATH # auto-sync by create-repo" >> "$TMP"
sort -u "$TMP" -o "$TMP"
crontab "$TMP"
rm "$TMP"

# üîó --share
if $share_repo && [[ "$platform" == "github" ]]; then
  echo -e "${GREEN}üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/$user/$repo${RESET}"
  echo -e "${YELLOW}üì¨ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É: gh api -X PUT /orgs/YOUR_ORG/teams/YOUR_TEAM/memberships/USERNAME${RESET}"
fi

# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
echo -e "${GREEN}üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo' —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å $platform${RESET}"
echo "üìÅ –ü—É—Ç—å: $PWD"
echo "üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: $REPO_LIST"
echo "‚è±Ô∏è Cron: –∫–∞–∂–¥—ã–µ $default_cron_interval –º–∏–Ω"
echo "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª: nano ~/.create-repo.conf"
