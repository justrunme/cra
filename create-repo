#!/bin/bash

CONFIG_FILE="$HOME/.create-repo.conf"
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"

mkdir -p ~/.create-repo/templates

# üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–ª–∞–≥–æ–≤
show_status=false
show_log=false
log_lines=20
run_update=false
run_clean=false
dry_run=false
interactive=false
show_help=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --status) show_status=true ; shift ;;
    --log) show_log=true; log_lines="${2:-20}"; shift 2;;
    --update) run_update=true ; shift ;;
    --clean) run_clean=true ; shift ;;
    --dry-run) dry_run=true ; shift ;;
    --interactive) interactive=true ; shift ;;
    -h|--help) show_help=true ; shift ;;
    *) repo=$1; shift ;;
  esac
done

# üìÇ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
SCRIPT_PATH="/usr/local/bin/update-all"

# üÜò --help
if $show_help || [[ -z "$repo" && "$interactive" = false && "$show_status" = false && "$show_log" = false && "$run_update" = false && "$run_clean" = false && "$dry_run" = false ]]; then
  echo "üì¶ create-repo ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Git-–ø—Ä–æ–µ–∫—Ç–æ–≤"
  echo ""
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
  echo "  create-repo [–∏–º—è] [–æ–ø—Ü–∏–∏]"
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --status           –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å cron –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
  echo "  --log [N]          –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)"
  echo "  --clean            –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Å–ª–µ–∂–µ–Ω–∏—è"
  echo "  --update           –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ (.deb –∏–∑ GitHub)"
  echo "  --dry-run          –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –ø—É—à–∞ –∏ cron"
  echo "  --interactive      –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"
  echo "  -h, --help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
  exit 0
fi

# üîç --status
if $show_status; then
  echo "üì¶ create-repo status"
  echo "----------------------------"
  echo "üìÅ –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: $PWD"
  echo "üìÑ –ö–æ–ª-–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: $(wc -l < "$REPO_LIST" 2>/dev/null)"
  echo "‚è±Ô∏è Cron –∑–∞–¥–∞—á–∞:"
  crontab -l | grep "$SCRIPT_PATH" || echo "üö´ –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
  exit 0
fi

# ü™µ --log
if $show_log; then
  echo "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ $log_lines —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞:"
  tail -n "$log_lines" "$LOG_FILE" 2>/dev/null || echo "–õ–æ–≥ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω."
  exit 0
fi

# üßπ --clean
if $run_clean; then
  echo "üßπ –ß–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫: $REPO_LIST"
  TMP=$(mktemp)
  while IFS= read -r path; do
    [ -d "$path" ] && echo "$path"
  done < "$REPO_LIST" > "$TMP"
  mv "$TMP" "$REPO_LIST"
  echo "‚úÖ –ì–æ—Ç–æ–≤–æ"
  exit 0
fi

# üöÄ --update
if $run_update; then
  echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
  LATEST=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest \
    | grep browser_download_url | grep .deb | cut -d '"' -f 4)
  curl -LO "$LATEST"
  sudo dpkg -i create-repo-auto_*.deb
  echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏."
  exit 0
fi

# üìã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
if $interactive; then
  echo "üî§ –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $(basename "$PWD"))"
  read -r input_repo
  repo=${input_repo:-$(basename "$PWD")}

  echo "üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (1 = GitHub, 2 = GitLab) [1]:"
  read -r input_platform
  platform=$([[ "$input_platform" == "2" ]] && echo "gitlab" || echo "github")

  echo "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π? (y/N):"
  read -r input_priv
  default_visibility=$([[ "$input_priv" == "y" || "$input_priv" == "Y" ]] && echo "private" || echo "public")

  echo "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª cron –≤ –º–∏–Ω—É—Ç–∞—Ö [1]:"
  read -r input_cron
  default_cron_interval=${input_cron:-1}
else
  repo=${repo:-$(basename "$PWD")}
  if command -v gh &>/dev/null; then
    default_platform="github"
  elif [ -n "$GITLAB_TOKEN" ]; then
    default_platform="gitlab"
  else
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gh –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GITLAB_TOKEN"
    exit 1
  fi
  platform=${default_platform}
fi

default_cron_interval=${default_cron_interval:-1}
default_visibility=${default_visibility:-public}

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
missing=""
check_dep() {
  if ! command -v "$1" &>/dev/null; then
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: $1"
    missing+=" $1"
  else
    echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ: $1"
  fi
}
check_dep git
check_dep curl
check_dep crontab
[[ "$platform" == "github" ]] && check_dep gh

# ‚ùó –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
if [ -n "$missing" ]; then
  echo "\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏: sudo apt install$missing"
  exit 1
fi

# üß™ dry-run
if $dry_run; then
  echo "üîé Dry-run: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '$repo' –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—à–µ–Ω –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ cron"
  exit 0
fi

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ create-repo (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git, —à–∞–±–ª–æ–Ω—ã, push –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)

# üõ†Ô∏è Git init
if [ ! -d .git ]; then
  git init
  git checkout -b main
else
  git checkout main 2>/dev/null || git checkout -b main
fi

# README
if [ ! -f README.md ]; then
  template="$HOME/.create-repo/templates/${platform}.README.md"
  [ -f "$template" ] && cp "$template" README.md || echo "# $repo" > README.md
fi

# .gitignore
if [ ! -f .gitignore ]; then
  ignore_template="$HOME/.create-repo/templates/${platform}.gitignore"
  [ -f "$ignore_template" ] && cp "$ignore_template" .gitignore || echo ".DS_Store" > .gitignore
fi

# Git add + commit
git add .
NOW=$(date "+%Y-%m-%d %H:%M:%S")
git commit -m "Initial commit at $NOW" 2>/dev/null || echo "‚ö†Ô∏è –ö–æ–º–º–∏—Ç —É–∂–µ –±—ã–ª."

# Remote push
if [[ "$platform" == "github" ]]; then
  remote_url="git@github.com:justrunme/$repo.git"
  if ! gh repo view "$repo" &>/dev/null; then
    gh repo create "$repo" --$default_visibility --source=. --push
  fi
else
  remote_url=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" \
    https://gitlab.com/api/v4/projects | grep -oP '"ssh_url_to_repo":"\K[^"]+')
fi

if ! git remote get-url origin &>/dev/null; then
  git remote add origin "$remote_url"
else
  echo "‚ÑπÔ∏è Remote 'origin' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ."
fi

git branch --set-upstream-to=origin/main main 2>/dev/null
echo "üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º git push..."
git push -u origin main && echo "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å origin/main"

# üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
mkdir -p "$(dirname $REPO_LIST)"
grep -qxF "$PWD" "$REPO_LIST" 2>/dev/null || echo "$PWD" >> "$REPO_LIST"
sort -u "$REPO_LIST" -o "$REPO_LIST"

# ‚è±Ô∏è Cron
TMP_CRON=$(mktemp)
crontab -l 2>/dev/null | grep -v "$SCRIPT_PATH" > "$TMP_CRON"
echo "*/$default_cron_interval * * * * $SCRIPT_PATH" >> "$TMP_CRON"
sort -u "$TMP_CRON" -o "$TMP_CRON"
crontab "$TMP_CRON"
rm "$TMP_CRON"
echo "‚úÖ Cron-–∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–µ $default_cron_interval –º–∏–Ω"

# üéâ –§–∏–Ω–∞–ª
cat <<EOF

üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ!
üìÅ –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: $PWD
üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $platform
üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo
üìù –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ—Å–ª–µ–∂–µ–Ω–∏–µ: $REPO_LIST
‚è±Ô∏è Cron-–∑–∞–¥–∞—á–∞: –∫–∞–∂–¥—ã–µ $default_cron_interval –º–∏–Ω

üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
   üõ† –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: nano ~/.create-repo.conf
   ‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª:  nano ~/.create-repo.conf
   üßπ –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞: sed -i '\|$PWD|d' $REPO_LIST
   üö´ –û—Ç–∫–ª—é—á–∏—Ç—å cron:    crontab -l | grep -v update-all | crontab -
   üîÅ –í–∫–ª—é—á–∏—Ç—å cron:     echo "*/1 * * * * $SCRIPT_PATH" | crontab -

üìò –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/justrunme/cra
EOF
