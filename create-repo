#!/bin/bash
set -e

# 🎨 Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# 📁 Paths
CONFIG_FILE="$HOME/.create-repo.conf"
LOCAL_CONFIG_FILE=".create-repo.local.conf"
PLATFORM_MAP="$HOME/.create-repo.platforms"
REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"
NOW=$(date "+%Y-%m-%d %H:%M:%S")

# 🧠 Flags
repo=""
platform_flag=""
show_help=false
show_platform_status=false
interactive=false
run_update=false

# 🧾 Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --help|-h) show_help=true ; shift ;;
    --interactive) interactive=true ; shift ;;
    --update) run_update=true ; shift ;;
    --platform=*) platform_flag="${1#*=}" ; shift ;;
    --platform-status) show_platform_status=true ; shift ;;
    *) repo=$1 ; shift ;;
  esac
done

# 📘 Help
if $show_help; then
  echo -e "${BLUE}📦 create-repo — DevOps automation CLI${RESET}"
  echo "Usage: create-repo [name] [--platform=github|gitlab|bitbucket] [--interactive] [--update]"
  echo "Flags: --platform-status, --help"
  exit 0
fi

# ⬆️ Update
if $run_update; then
  echo -e "${BLUE}⬆️ Checking for updates...${RESET}"
  current_version=$(dpkg -s create-repo 2>/dev/null | grep '^Version:' | awk '{print $2}')
  latest_version=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest | grep '"tag_name":' | cut -d '"' -f 4 | sed 's/^v//')
  echo -e "Installed: ${YELLOW}${current_version:-none}${RESET}, Latest: ${GREEN}$latest_version${RESET}"

  if [[ "$current_version" == "$latest_version" ]]; then
    echo -e "${GREEN}✅ Already up to date.${RESET}"; exit 0
  fi

  url=$(curl -s https://api.github.com/repos/justrunme/cra/releases/latest \
    | jq -r '.assets[] | select(.name | endswith(".deb")) | .browser_download_url')
  tmp=$(mktemp)
  curl -L "$url" -o "$tmp" && sudo dpkg -i "$tmp" && rm "$tmp"
  echo -e "${GREEN}✅ Updated to $latest_version${RESET}"
  exit 0
fi

# 📍 Platform status
if $show_platform_status; then
  echo -e "${BLUE}📦 Folder-to-platform bindings:${RESET}"
  [ -f "$PLATFORM_MAP" ] && cat "$PLATFORM_MAP" || echo "No bindings found."
  exit 0
fi

# 📁 Current dir
CURRENT_FOLDER=$(realpath "$PWD")

# 📦 Platform selection
if [[ -n "$platform_flag" ]]; then
  platform="$platform_flag"
  echo "$CURRENT_FOLDER=$platform" >> "$PLATFORM_MAP"
elif [[ -f "$PLATFORM_MAP" ]]; then
  platform=$(grep "^$CURRENT_FOLDER=" "$PLATFORM_MAP" | cut -d= -f2)
fi

if [[ -z "$platform" ]]; then
  platforms=()
  [[ -x "$(command -v gh)" ]] && gh auth status &>/dev/null && platforms+=("github")
  [[ -n "$GITLAB_TOKEN" ]] && platforms+=("gitlab")
  [[ -n "$BITBUCKET_USERNAME" && -n "$BITBUCKET_APP_PASSWORD" ]] && platforms+=("bitbucket")

  if [[ ${#platforms[@]} -eq 1 ]]; then
    platform="${platforms[0]}"
  elif [[ ${#platforms[@]} -gt 1 ]]; then
    echo -e "${YELLOW}⚠️ Multiple platforms detected: ${platforms[*]}${RESET}"
    echo -ne "${YELLOW}❓ Choose platform for this folder: ${RESET}"
    read chosen
    platform="$chosen"
    echo "$CURRENT_FOLDER=$platform" >> "$PLATFORM_MAP"
    echo -e "${GREEN}📁 Bound to: $platform${RESET}"
  fi
fi

if [[ -z "$platform" ]]; then
  echo -e "${RED}❌ No platform detected. Set up GH/GitLab/Bitbucket credentials.${RESET}"
  exit 1
fi

# 🧩 Load config
if [[ -f "$LOCAL_CONFIG_FILE" ]]; then
  source "$LOCAL_CONFIG_FILE"
elif [[ -f "$CONFIG_FILE" ]]; then
  source "$CONFIG_FILE"
fi

# 🌟 Interactive (first-time)
if $interactive || [ ! -f "$CONFIG_FILE" ]; then
  echo -e "${BLUE}✨ First-time setup (interactive)...${RESET}"
  echo -ne "${YELLOW}📦 Repo name [$(basename "$PWD")]: ${RESET}"
  read input_repo
  repo=${input_repo:-$(basename "$PWD")}

  echo -ne "${YELLOW}🔐 Visibility (public/private) [public]: ${RESET}"
  read input_visibility
  default_visibility=${input_visibility:-public}

  echo -ne "${YELLOW}👥 GitHub team (optional): ${RESET}"
  read input_team
  default_team=$input_team

  echo -ne "${YELLOW}⏱ Sync interval (min) [1]: ${RESET}"
  read input_interval
  default_cron_interval=${input_interval:-1}

  echo -ne "${YELLOW}🌿 Branch to use [main]: ${RESET}"
  read input_branch
  default_branch=${input_branch:-main}

  echo -ne "${YELLOW}💾 Save config globally or locally? [global/local]: ${RESET}"
  read scope

  cfg="$CONFIG_FILE"
  [[ "$scope" == "local" ]] && cfg="$LOCAL_CONFIG_FILE"

  cat > "$cfg" <<EOF
default_visibility=$default_visibility
default_team=$default_team
default_cron_interval=$default_cron_interval
default_branch=$default_branch
EOF

  echo -e "${GREEN}✅ Config saved to $cfg${RESET}"
  source "$cfg"
fi

# 🧠 Repo & branch
repo=${repo:-$(basename "$PWD")}
branch=${default_branch:-main}
echo -e "${GREEN}📦 Initializing '$repo' on $platform (branch: $branch)...${RESET}"

# 🌱 Git init
git init &>/dev/null
git checkout -b "$branch" &>/dev/null || git checkout "$branch" &>/dev/null

# 📄 Defaults
[ ! -f README.md ] && echo "# $repo" > README.md
[ ! -f .gitignore ] && echo ".DS_Store" > .gitignore

git add .
git commit -m "Initial commit at $NOW" &>/dev/null || true

# 🔗 Create remote repo
if [[ "$platform" == "github" ]]; then
  user=$(gh api user --jq .login)
  remote_url="git@github.com:$user/$repo.git"
  gh repo view "$repo" &>/dev/null || gh repo create "$repo" --"$default_visibility" --source=. --push
elif [[ "$platform" == "gitlab" ]]; then
  response=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --data "name=$repo&visibility=$default_visibility" https://gitlab.com/api/v4/projects)
  remote_url=$(echo "$response" | grep -oP '"ssh_url_to_repo":"\K[^"]+')
elif [[ "$platform" == "bitbucket" ]]; then
  is_private="false"
  [[ "$default_visibility" == "private" ]] && is_private="true"
  curl -s -u "$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD" \
    -X POST "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_USERNAME/$repo" \
    -H "Content-Type: application/json" \
    -d "{\"scm\": \"git\", \"is_private\": $is_private }"
  remote_url="git@bitbucket.org:$BITBUCKET_USERNAME/$repo.git"
fi

# 🚀 Push
git remote add origin "$remote_url" 2>/dev/null || true
git push -u origin "$branch" &>/dev/null || true

# 📝 Track
grep -qxF "$PWD" "$REPO_LIST" || echo "$PWD" >> "$REPO_LIST"
echo "$NOW | $PWD | synced to $platform on branch $branch" >> "$LOG_FILE"

# ✅ Done
echo ""
echo -e "${GREEN}🎉 Repo '$repo' initialized and pushed to $platform!${RESET}"
echo "🌿 Branch: $branch"
echo "📁 Path: $PWD"
echo "📝 Tracked in: $REPO_LIST"
echo "ℹ️ Platform: $platform"
