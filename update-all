#!/bin/bash

REPO_LIST="$HOME/.repo-autosync.list"
LOG_FILE="$HOME/.create-repo.log"
ERROR_LOG="$HOME/.create-repo-errors.log"

# 🎨 Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# 🔄 Load .env if exists
load_env() {
  [ -f .env ] && export $(grep -v '^#' .env | xargs)
}

# 🌿 Detect current branch
detect_branch() {
  if [[ -f .create-repo.local.conf ]]; then
    source .create-repo.local.conf
    [[ -n "$default_branch" ]] && echo "$default_branch" && return
  fi

  if git rev-parse --verify main &>/dev/null; then
    echo "main"
  elif git rev-parse --verify master &>/dev/null; then
    echo "master"
  else
    git symbolic-ref --short HEAD 2>/dev/null || echo "main"
  fi
}

# 🔔 Notify
notify() {
  msg="$1"
  if command -v notify-send &>/dev/null; then
    notify-send "create-repo" "$msg"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    osascript -e "display notification \"$msg\" with title \"create-repo\""
  elif grep -qEi "(Microsoft|WSL)" /proc/version &>/dev/null; then
    powershell.exe -Command "New-BurntToastNotification -Text 'create-repo', '$msg'" >/dev/null 2>&1 || true
  fi
}

# 📄 Ensure repo list exists
[ ! -f "$REPO_LIST" ] && touch "$REPO_LIST"

# 🔁 Process each folder
mapfile -t REPOS < "$REPO_LIST"

for REPO in "${REPOS[@]}"; do
  echo -e "${BLUE}📁 Checking: $REPO${RESET}"
  cd "$REPO" || {
    echo -e "${RED}❌ Cannot access $REPO${RESET}" | tee -a "$ERROR_LOG"
    continue
  }

  # 🛑 Skip if .create-repo.local.conf has disable_sync=true
  if [[ -f .create-repo.local.conf ]]; then
    source .create-repo.local.conf
    if [[ "$disable_sync" == "true" ]]; then
      echo -e "${YELLOW}🚫 Skipped (disabled in .create-repo.local.conf)${RESET}"
      continue
    fi
  fi

  load_env
  BRANCH=$(detect_branch)
  NOW=$(date "+%Y-%m-%d %H:%M:%S")

  if ! git diff --quiet || ! git diff --cached --quiet || [ -n "$(git ls-files --others --exclude-standard)" ]; then
    {
      git add .
      git commit -m "🔁 Auto commit at $NOW" || echo -e "${YELLOW}⚠️ No changes to commit${RESET}"
      git pull --rebase origin "$BRANCH"
      git push origin "$BRANCH"
      echo "$NOW | ✅ Synced: $REPO" >> "$LOG_FILE"
      echo -e "${GREEN}✅ Synced: $REPO [$BRANCH]${RESET}"
      notify "✅ Synced: $(basename "$REPO") [$BRANCH]"
    } || {
      echo "$NOW | ❌ Sync error: $REPO" >> "$ERROR_LOG"
      echo -e "${RED}❌ Sync error in $REPO${RESET}"
    }
  else
    echo "$NOW | ✅ No changes: $REPO" >> "$LOG_FILE"
    echo -e "${GREEN}✔ No changes to sync${RESET}"
  fi

  echo -e "${RESET}-----------------------------"
done
